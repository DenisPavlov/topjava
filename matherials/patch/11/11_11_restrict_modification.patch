Index: src/main/java/ru/javawebinar/topjava/util/exception/NotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/exception/NotFoundException.java	(revision 7b8ee52b1a8e77e45682011413d3234de77a1cb6)
+++ src/main/java/ru/javawebinar/topjava/util/exception/NotFoundException.java	(date 1587591308494)
@@ -1,7 +1,10 @@
 package ru.javawebinar.topjava.util.exception;
 
-public class NotFoundException extends RuntimeException {
-    public NotFoundException(String message) {
-        super(message);
+public class NotFoundException extends ApplicationException {
+    public static final String NOT_FOUND_EXCEPTION = "exception.common.notFound";
+
+    //  http://stackoverflow.com/a/22358422/548473
+    public NotFoundException(String arg) {
+        super(ErrorType.DATA_NOT_FOUND, NOT_FOUND_EXCEPTION, arg);
     }
 }
\ No newline at end of file
Index: src/main/resources/spring/spring-db.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/spring/spring-db.xml	(revision 7b8ee52b1a8e77e45682011413d3234de77a1cb6)
+++ src/main/resources/spring/spring-db.xml	(date 1587592376046)
@@ -34,7 +34,7 @@
               p:password="${database.password}"/>
     </beans>
 
-    <beans profile="postgres">
+    <beans profile="postgres, heroku">
         <!--
             For postgres driver logging
             It uses java.util.logging and logged via jul-to-slf4j bridge
Index: src/main/java/ru/javawebinar/topjava/web/GlobalExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/GlobalExceptionHandler.java	(revision 7b8ee52b1a8e77e45682011413d3234de77a1cb6)
+++ src/main/java/ru/javawebinar/topjava/web/GlobalExceptionHandler.java	(date 1587591728829)
@@ -9,6 +9,7 @@
 import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.NoHandlerFoundException;
 import ru.javawebinar.topjava.util.ValidationUtil;
+import ru.javawebinar.topjava.util.exception.ApplicationException;
 import ru.javawebinar.topjava.util.exception.ErrorType;
 
 import javax.servlet.http.HttpServletRequest;
@@ -26,21 +27,27 @@
 
     @ExceptionHandler(NoHandlerFoundException.class)
     public ModelAndView wrongRequest(HttpServletRequest req, NoHandlerFoundException e) throws Exception {
-        return logAndGetExceptionView(req, e, false, ErrorType.WRONG_REQUEST);
+        return logAndGetExceptionView(req, e, false, ErrorType.WRONG_REQUEST, null);
+    }
+
+    @ExceptionHandler(ApplicationException.class)
+    public ModelAndView applicationErrorHandler(HttpServletRequest req, ApplicationException appEx) throws Exception {
+        return logAndGetExceptionView(req, appEx, true, appEx.getType(),
+                messageSourceAccessor.getMessage(appEx.getMsgCode(), appEx.getArgs()));
     }
 
     @ExceptionHandler(Exception.class)
     public ModelAndView defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception {
         log.error("Exception at request " + req.getRequestURL(), e);
-        return logAndGetExceptionView(req, e, true, ErrorType.APP_ERROR);
+        return logAndGetExceptionView(req, e, true, ErrorType.APP_ERROR, null);
     }
 
-    private ModelAndView logAndGetExceptionView(HttpServletRequest req, Exception e, boolean logException, ErrorType errorType) {
+    private ModelAndView logAndGetExceptionView(HttpServletRequest req, Exception e, boolean logException, ErrorType errorType, String msg) {
         Throwable rootCause = ValidationUtil.logAndGetRootCause(log, req, e, logException, errorType);
 
         HttpStatus httpStatus = errorType.getStatus();
         ModelAndView mav = new ModelAndView("exception",
-                Map.of("exception", rootCause, "message", ValidationUtil.getMessage(rootCause),
+                Map.of("exception", rootCause, "message", msg != null ? msg : ValidationUtil.getMessage(rootCause),
                         "typeMessage", messageSourceAccessor.getMessage(errorType.getErrorCode()),
                         "status", httpStatus));
         mav.setStatus(httpStatus);
Index: src/main/java/ru/javawebinar/topjava/util/ValidationUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/ValidationUtil.java	(revision 7b8ee52b1a8e77e45682011413d3234de77a1cb6)
+++ src/main/java/ru/javawebinar/topjava/util/ValidationUtil.java	(date 1587591308499)
@@ -29,9 +29,9 @@
         return object;
     }
 
-    public static void checkNotFound(boolean found, String msg) {
+    public static void checkNotFound(boolean found, String arg) {
         if (!found) {
-            throw new NotFoundException("Not found entity with " + msg);
+            throw new NotFoundException(arg);
         }
     }
 
Index: config/messages/app.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/messages/app.properties	(revision 7b8ee52b1a8e77e45682011413d3234de77a1cb6)
+++ config/messages/app.properties	(date 1587591308477)
@@ -49,7 +49,9 @@
 common.cancel=Cancel
 common.search=Search
 
+exception.common.notFound=Not found entity with {0}
 exception.user.duplicateEmail=User with this email already exists
+exception.user.modificationRestriction=Admin/User modification is forbidden
 exception.meal.duplicateDateTime=You already have meal with this date/time
 
 error.appError=Application error
Index: config/messages/app_ru.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/messages/app_ru.properties	(revision 7b8ee52b1a8e77e45682011413d3234de77a1cb6)
+++ config/messages/app_ru.properties	(date 1587591308482)
@@ -51,7 +51,9 @@
 common.cancel=Отменить
 common.search=Искать
 
+exception.common.notFound=Не найдена запись с {0}
 exception.user.duplicateEmail=Пользователь с такой почтой уже есть в приложении
+exception.user.modificationRestriction=Модификация Admin/User запрещена
 exception.meal.duplicateDateTime=У вас уже есть еда с такой датой/временем
 
 error.appError=Ошибка приложения
Index: src/test/java/ru/javawebinar/topjava/service/AbstractMealServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/AbstractMealServiceTest.java	(revision 7b8ee52b1a8e77e45682011413d3234de77a1cb6)
+++ src/test/java/ru/javawebinar/topjava/service/AbstractMealServiceTest.java	(date 1587591852597)
@@ -5,6 +5,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import ru.javawebinar.topjava.model.Meal;
 import ru.javawebinar.topjava.repository.MealRepository;
+import ru.javawebinar.topjava.util.exception.ErrorType;
 import ru.javawebinar.topjava.util.exception.NotFoundException;
 
 import javax.validation.ConstraintViolationException;
@@ -13,6 +14,7 @@
 
 import static java.time.LocalDateTime.of;
 import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static ru.javawebinar.topjava.MealTestData.*;
 import static ru.javawebinar.topjava.UserTestData.ADMIN_ID;
 import static ru.javawebinar.topjava.UserTestData.USER_ID;
@@ -82,7 +84,10 @@
     void updateNotFound() throws Exception {
         NotFoundException ex = assertThrows(NotFoundException.class,
                 () -> service.update(MEAL1, ADMIN_ID));
-        Assertions.assertEquals("Not found entity with id=" + MEAL1_ID, ex.getMessage());
+        String msg = ex.getMessage();
+        assertTrue(msg.contains(ErrorType.DATA_NOT_FOUND.name()));
+        assertTrue(msg.contains(NotFoundException.NOT_FOUND_EXCEPTION));
+        assertTrue(msg.contains(String.valueOf(MEAL1_ID)));
     }
 
     @Test
Index: src/main/java/ru/javawebinar/topjava/web/ExceptionInfoHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/ExceptionInfoHandler.java	(revision 7b8ee52b1a8e77e45682011413d3234de77a1cb6)
+++ src/main/java/ru/javawebinar/topjava/web/ExceptionInfoHandler.java	(date 1587591621211)
@@ -7,6 +7,7 @@
 import org.springframework.core.annotation.Order;
 import org.springframework.dao.DataIntegrityViolationException;
 import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
 import org.springframework.http.converter.HttpMessageNotReadableException;
 import org.springframework.validation.BindException;
 import org.springframework.validation.BindingResult;
@@ -17,10 +18,10 @@
 import org.springframework.web.bind.annotation.RestControllerAdvice;
 import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
 import ru.javawebinar.topjava.util.ValidationUtil;
+import ru.javawebinar.topjava.util.exception.ApplicationException;
 import ru.javawebinar.topjava.util.exception.ErrorInfo;
 import ru.javawebinar.topjava.util.exception.ErrorType;
 import ru.javawebinar.topjava.util.exception.IllegalRequestDataException;
-import ru.javawebinar.topjava.util.exception.NotFoundException;
 
 import javax.servlet.http.HttpServletRequest;
 import java.util.Map;
@@ -45,11 +46,11 @@
         this.messageSourceAccessor = messageSourceAccessor;
     }
 
-    //  http://stackoverflow.com/a/22358422/548473
-    @ResponseStatus(value = HttpStatus.UNPROCESSABLE_ENTITY)
-    @ExceptionHandler(NotFoundException.class)
-    public ErrorInfo handleError(HttpServletRequest req, NotFoundException e) {
-        return logAndGetErrorInfo(req, e, false, DATA_NOT_FOUND);
+    @ExceptionHandler(ApplicationException.class)
+    public ResponseEntity<ErrorInfo> applicationError(HttpServletRequest req, ApplicationException appEx) {
+        ErrorInfo errorInfo = logAndGetErrorInfo(req, appEx, false, appEx.getType(),
+                messageSourceAccessor.getMessage(appEx.getMsgCode(), appEx.getArgs()));
+        return ResponseEntity.status(appEx.getType().getStatus()).body(errorInfo);
     }
 
     @ResponseStatus(value = HttpStatus.CONFLICT)  // 409
Index: src/main/java/ru/javawebinar/topjava/util/exception/ApplicationException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/exception/ApplicationException.java	(date 1587591308486)
+++ src/main/java/ru/javawebinar/topjava/util/exception/ApplicationException.java	(date 1587591308486)
@@ -0,0 +1,33 @@
+package ru.javawebinar.topjava.util.exception;
+
+import java.util.Arrays;
+
+public class ApplicationException extends RuntimeException {
+
+    private final ErrorType type;
+    private final String msgCode;
+    private final String[] args;
+
+    public ApplicationException(String msgCode) {
+        this(ErrorType.APP_ERROR, msgCode);
+    }
+
+    public ApplicationException(ErrorType type, String msgCode, String... args) {
+        super(String.format("type=%s, msgCode=%s, args=%s", type, msgCode, Arrays.toString(args)));
+        this.type = type;
+        this.msgCode = msgCode;
+        this.args = args;
+    }
+
+    public ErrorType getType() {
+        return type;
+    }
+
+    public String getMsgCode() {
+        return msgCode;
+    }
+
+    public String[] getArgs() {
+        return args;
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java	(revision 7b8ee52b1a8e77e45682011413d3234de77a1cb6)
+++ src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java	(date 1587591308507)
@@ -3,12 +3,16 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.core.env.Environment;
 import org.springframework.web.bind.WebDataBinder;
 import org.springframework.web.bind.annotation.InitBinder;
+import ru.javawebinar.topjava.Profiles;
+import ru.javawebinar.topjava.model.AbstractBaseEntity;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.service.UserService;
 import ru.javawebinar.topjava.to.UserTo;
 import ru.javawebinar.topjava.util.UserUtil;
+import ru.javawebinar.topjava.util.exception.ModificationRestrictionException;
 
 import java.util.List;
 
@@ -24,6 +28,14 @@
     @Autowired
     private UniqueMailValidator emailValidator;
 
+    private boolean modificationRestriction;
+
+    @Autowired
+    @SuppressWarnings("deprecation")
+    public void setEnvironment(Environment environment) {
+        modificationRestriction = environment.acceptsProfiles(Profiles.HEROKU);
+    }
+
     @InitBinder
     protected void initBinder(WebDataBinder binder) {
         binder.addValidators(emailValidator);
@@ -52,18 +64,21 @@
 
     public void delete(int id) {
         log.info("delete {}", id);
+        checkModificationAllowed(id);
         service.delete(id);
     }
 
     public void update(User user, int id) {
         log.info("update {} with id={}", user, id);
         assureIdConsistent(user, id);
+        checkModificationAllowed(id);
         service.update(user);
     }
 
     public void update(UserTo userTo, int id) {
         log.info("update {} with id={}", userTo, id);
         assureIdConsistent(userTo, id);
+        checkModificationAllowed(id);
         service.update(userTo);
     }
 
@@ -74,6 +89,13 @@
 
     public void enable(int id, boolean enabled) {
         log.info(enabled ? "enable {}" : "disable {}", id);
+        checkModificationAllowed(id);
         service.enable(id, enabled);
     }
+
+    private void checkModificationAllowed(int id) {
+        if (modificationRestriction && id < AbstractBaseEntity.START_SEQ + 2) {
+            throw new ModificationRestrictionException();
+        }
+    }
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/util/exception/ModificationRestrictionException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/exception/ModificationRestrictionException.java	(date 1587591308490)
+++ src/main/java/ru/javawebinar/topjava/util/exception/ModificationRestrictionException.java	(date 1587591308490)
@@ -0,0 +1,9 @@
+package ru.javawebinar.topjava.util.exception;
+
+public class ModificationRestrictionException extends ApplicationException {
+    public static final String EXCEPTION_MODIFICATION_RESTRICTION = "exception.user.modificationRestriction";
+
+    public ModificationRestrictionException() {
+        super(ErrorType.VALIDATION_ERROR, EXCEPTION_MODIFICATION_RESTRICTION);
+    }
+}
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/web/user/HerokuRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/user/HerokuRestControllerTest.java	(date 1587592469825)
+++ src/test/java/ru/javawebinar/topjava/web/user/HerokuRestControllerTest.java	(date 1587592469825)
@@ -0,0 +1,43 @@
+package ru.javawebinar.topjava.web.user;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.http.MediaType;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
+import ru.javawebinar.topjava.UserTestData;
+import ru.javawebinar.topjava.util.exception.ErrorType;
+import ru.javawebinar.topjava.web.AbstractControllerTest;
+
+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+import static ru.javawebinar.topjava.Profiles.HEROKU;
+import static ru.javawebinar.topjava.TestUtil.userHttpBasic;
+import static ru.javawebinar.topjava.UserTestData.*;
+import static ru.javawebinar.topjava.util.exception.ModificationRestrictionException.EXCEPTION_MODIFICATION_RESTRICTION;
+
+@ActiveProfiles({HEROKU})
+class HerokuRestControllerTest extends AbstractControllerTest {
+
+    private static final String REST_URL = AdminRestController.REST_URL + '/';
+
+    @Test
+    void delete() throws Exception {
+        perform(MockMvcRequestBuilders.delete(REST_URL + USER_ID)
+                .with(userHttpBasic(ADMIN)))
+                .andDo(print())
+                .andExpect(errorType(ErrorType.VALIDATION_ERROR))
+                .andExpect(detailMessage(EXCEPTION_MODIFICATION_RESTRICTION))
+                .andExpect(status().isUnprocessableEntity());
+    }
+
+    @Test
+    void update() throws Exception {
+        perform(MockMvcRequestBuilders.put(REST_URL + USER_ID)
+                .contentType(MediaType.APPLICATION_JSON)
+                .with(userHttpBasic(ADMIN))
+                .content(UserTestData.jsonWithPassword(USER, "password")))
+                .andExpect(errorType(ErrorType.VALIDATION_ERROR))
+                .andExpect(detailMessage(EXCEPTION_MODIFICATION_RESTRICTION))
+                .andExpect(status().isUnprocessableEntity());
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/Profiles.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/Profiles.java	(revision 7b8ee52b1a8e77e45682011413d3234de77a1cb6)
+++ src/main/java/ru/javawebinar/topjava/Profiles.java	(date 1587591308524)
@@ -10,7 +10,8 @@
 
     public static final String
             POSTGRES_DB = "postgres",
-            HSQL_DB = "hsqldb";
+            HSQL_DB = "hsqldb",
+            HEROKU = "heroku";
 
     //  Get DB profile depending of DB driver in classpath
     public static String getActiveDbProfile() {
